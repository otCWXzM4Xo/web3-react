{"version":3,"file":"lattice-connector.esm.js","sources":["../src/index.ts"],"sourcesContent":["import { ConnectorUpdate } from '@web3-react/types'\nimport { AbstractConnector } from '@web3-react/abstract-connector'\nimport Web3ProviderEngine from 'web3-provider-engine'\nimport { LatticeSubprovider } from '@0x/subproviders/lib/src/subproviders/lattice'\nimport CacheSubprovider from 'web3-provider-engine/subproviders/cache.js'\nimport { RPCSubprovider } from '@0x/subproviders/lib/src/subproviders/rpc_subprovider' // https://github.com/0xProject/0x-monorepo/issues/1400\n\ninterface LatticeConnectorArguments {\n  chainId: number\n  url: string\n  pollingInterval?: number\n  requestTimeoutMs?: number\n  appName: string\n}\n\nexport class LatticeConnector extends AbstractConnector {\n  private readonly chainId: number\n  private readonly url: string\n  private readonly pollingInterval?: number\n  private readonly requestTimeoutMs?: number\n  private readonly appName: string\n  private provider: any\n\n  constructor({ chainId, url, pollingInterval, requestTimeoutMs, appName }: LatticeConnectorArguments) {\n    super({ supportedChainIds: [chainId] })\n\n    this.chainId = chainId\n    this.url = url\n    this.pollingInterval = pollingInterval\n    this.requestTimeoutMs = requestTimeoutMs\n    this.appName = appName\n  }\n\n  public async activate(): Promise<ConnectorUpdate> {\n    if (!this.provider) {\n      const LatticeKeyring = await import('eth-lattice-keyring').then(m => m?.default ?? m)\n      const engine = new Web3ProviderEngine({ pollingInterval: this.pollingInterval })\n      const opts = {\n        appName: this.appName,\n        latticeConnectClient: LatticeKeyring,\n        networkId: this.chainId\n      }\n      engine.addProvider(new LatticeSubprovider(opts))\n      engine.addProvider(new CacheSubprovider())\n      engine.addProvider(new RPCSubprovider(this.url, this.requestTimeoutMs))\n      this.provider = engine\n    }\n\n    this.provider.start()\n\n    return { provider: this.provider, chainId: this.chainId }\n  }\n\n  public async getProvider(): Promise<Web3ProviderEngine> {\n    return this.provider\n  }\n\n  public async getChainId(): Promise<number> {\n    return this.chainId\n  }\n\n  public async getAccount(): Promise<null> {\n    return this.provider._providers[0].getAccountsAsync(1).then((accounts: string[]): string => accounts[0])\n  }\n\n  public deactivate() {\n    this.provider.stop()\n  }\n\n  public async close(): Promise<null> {\n    this.emitDeactivate()\n    // Due to limitations in the LatticeSubprovider API, we use this code with `getAccounts`\n    // as a hack to allow us to close out the connection and forget data.\n    // It will get handled in `eth-lattice-keyring`, which will forget the device and return\n    // an empty array (whose first element will be null/undefined)\n    const CLOSE_CODE = -1000\n    return this.provider._providers[0].getAccountsAsync(CLOSE_CODE).then((accounts: string[]): string => accounts[0])\n  }\n}\n"],"names":["LatticeConnector","chainId","url","pollingInterval","requestTimeoutMs","appName","supportedChainIds","activate","provider","start","then","m","LatticeKeyring","engine","Web3ProviderEngine","opts","latticeConnectClient","networkId","addProvider","LatticeSubprovider","CacheSubprovider","RPCSubprovider","getProvider","getChainId","getAccount","_providers","getAccountsAsync","accounts","deactivate","stop","close","emitDeactivate","CLOSE_CODE","AbstractConnector"],"mappings":";;;;;;;;;;;;;;;;;;;;;;IAeaA,gBAAb;AAAA;;AAQE;;;QAAcC,eAAAA;QAASC,WAAAA;QAAKC,uBAAAA;QAAiBC,wBAAAA;QAAkBC,eAAAA;AAC7D,0CAAM;AAAEC,MAAAA,iBAAiB,EAAE,CAACL,OAAD;AAArB,KAAN;AAEA,UAAKA,OAAL,GAAeA,OAAf;AACA,UAAKC,GAAL,GAAWA,GAAX;AACA,UAAKC,eAAL,GAAuBA,eAAvB;AACA,UAAKC,gBAAL,GAAwBA,gBAAxB;AACA,UAAKC,OAAL,GAAeA,OAAf;;AACD;;AAhBH;;AAAA,SAkBeE,QAlBf;AAAA;mBAmBS;;;AAcL,eAAKC,QAAL,CAAcC,KAAd;;AAEA,eAAO;AAAED,UAAAA,QAAQ,EAAE,OAAKA,QAAjB;AAA2BP,UAAAA,OAAO,EAAE,OAAKA;AAAzC,SAAP;;;;YAhBI,CAAC,OAAKO;iCACqB,OAAO,qBAAP,EAA8BE,IAA9B,CAAmC,UAAAC,CAAC;AAAA;;AAAA,iCAAIA,CAAJ,oBAAIA,CAAC,WAAL,yBAAkBA,CAAlB;AAAA,WAApC,kBAAvBC;AACN,gBAAMC,MAAM,GAAG,IAAIC,kBAAJ,CAAuB;AAAEX,cAAAA,eAAe,EAAE,OAAKA;AAAxB,aAAvB,CAAf;AACA,gBAAMY,IAAI,GAAG;AACXV,cAAAA,OAAO,EAAE,OAAKA,OADH;AAEXW,cAAAA,oBAAoB,EAAEJ,cAFX;AAGXK,cAAAA,SAAS,EAAE,OAAKhB;AAHL,aAAb;AAKAY,YAAAA,MAAM,CAACK,WAAP,CAAmB,IAAIC,kBAAJ,CAAuBJ,IAAvB,CAAnB;AACAF,YAAAA,MAAM,CAACK,WAAP,CAAmB,IAAIE,gBAAJ,EAAnB;AACAP,YAAAA,MAAM,CAACK,WAAP,CAAmB,IAAIG,cAAJ,CAAmB,OAAKnB,GAAxB,EAA6B,OAAKE,gBAAlC,CAAnB;AACA,mBAAKI,QAAL,GAAgBK,MAAhB;;;;;;AAMH,KApCH;AAAA;AAAA;AAAA;;AAAA,SAsCeS,WAtCf;AAAA;mBAuCW;;AAAP,6BAAO,OAAKd,QAAZ;AACD,KAxCH;AAAA;AAAA;AAAA;;AAAA,SA0Cee,UA1Cf;AAAA;mBA2CW;;AAAP,6BAAO,OAAKtB,OAAZ;AACD,KA5CH;AAAA;AAAA;AAAA;;AAAA,SA8CeuB,UA9Cf;AAAA;mBA+CW;;AAAP,6BAAO,OAAKhB,QAAL,CAAciB,UAAd,CAAyB,CAAzB,EAA4BC,gBAA5B,CAA6C,CAA7C,EAAgDhB,IAAhD,CAAqD,UAACiB,QAAD;AAAA,eAAgCA,QAAQ,CAAC,CAAD,CAAxC;AAAA,OAArD,CAAP;AACD,KAhDH;AAAA;AAAA;AAAA;;AAAA,SAkDSC,UAlDT,GAkDS;AACL,SAAKpB,QAAL,CAAcqB,IAAd;AACD,GApDH;;AAAA,SAsDeC,KAtDf;AAAA;oBAuDI;;AAAA,cAAKC,cAAL;AAEA;AACA;AACA;;;AACA,UAAMC,UAAU,GAAG,CAAC,IAApB;AACA,6BAAO,QAAKxB,QAAL,CAAciB,UAAd,CAAyB,CAAzB,EAA4BC,gBAA5B,CAA6CM,UAA7C,EAAyDtB,IAAzD,CAA8D,UAACiB,QAAD;AAAA,eAAgCA,QAAQ,CAAC,CAAD,CAAxC;AAAA,OAA9D,CAAP;AACD,KA9DH;AAAA;AAAA;AAAA;;AAAA;AAAA,EAAsCM,iBAAtC;;;;"}